<#ftl auto_esc=false>
package ${package};

import org.ehcache.config.builders.CacheConfigurationBuilder;
import org.ehcache.config.builders.ExpiryPolicyBuilder;
import org.ehcache.config.builders.ResourcePoolsBuilder;
<#list imported_packages as imported_package>
import ${imported_package};
</#list>

import java.util.Map;

/**
 * Generated by Code maker
 */
public class ${model.systemName} extends SimpleCacheStorage<${model.key}, ${model.value}> {
    private static volatile boolean isInitialized = false;

    @Override
    protected String cacheAlias() {
        return "${model.cacheName}";
    }

    @Override
    protected Class<${model.key}> getKeyClass() {
        return ${model.key}.class;
    }

    @Override
    protected Class<${model.value}> getElementClass() {
        return ${model.value}.class;
    }

    @Override
    protected CacheConfigurationBuilder<${model.key}, ${model.value}> getConfigurationBuilder(Class<${model.key}> key, Class<${model.value}> value) {
        CacheConfigurationBuilder<${model.key}, ${model.value}> builder = CacheConfigurationBuilder.newCacheConfigurationBuilder(key,
            value,
            ResourcePoolsBuilder.heap(100)
        );
        builder.withExpiry(ExpiryPolicyBuilder.noExpiration());
        return builder;
    }

    public void initialize(Map<${model.key}, ${model.value}> cachedValues) {
        synchronized (this) {
            if (!isInitialized) {
                putAll(cachedValues);
                isInitialized = true;
            }
        }
    }
}
